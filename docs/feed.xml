<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Antoine's Blog</title>
        <link>https://gantoin.github.io/</link>
        <atom:link href="https://gantoin.github.io//feed.xml" rel="self" type="application/rss+xml"/>
        <description>Basic blog of an average Java developer</description>
        <language>en-gb</language>
        <pubDate>Sat, 28 Jan 2023 00:21:24 +0000</pubDate>
        <lastBuildDate>Sat, 28 Jan 2023 00:21:24 +0000</lastBuildDate>

            <item>
                <title>🚌 Make your Kafka bus more robust with Apache Avro &amp; Confluent Schema Registry</title>
                <link>https://gantoin.github.io//blog/2023/7d0dd6a8a41688208218958ef9cc9b8d.html</link>
                <pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate>
                <guid isPermaLink="false">blog/2023/7d0dd6a8a41688208218958ef9cc9b8d.html</guid>
                <description>
                        &lt;p&gt;In this article, you will learn how to use Apache Avro and Confluent Schema Registry to make your Kafka bus more robust.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Apache Kafka is a distributed streaming platform. It is used to publish and subscribe to streams of records, similar to a message queue or enterprise messaging system. Kafka is often used as a data bus to connect different systems and applications. It is a very powerful tool, but it is not without its challenges. One of the most common challenges is the lack of data validation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gantoin/gantoin.github.io/master/assets/img/blog_content/avro1.png&quot; alt=&quot;Kafka bus&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It is important to understand that Kafka take bytes as input and output. It is up to the application to serialize and deserialize. Also, if you don&apos;t have a total control on application that consume your data, you can&apos;t be sure that the data will be valid.&lt;/p&gt;
&lt;p&gt;If you need to update your data model, you will have to deal with backward compatibility with probably some consumer that will not be able to read the new data.&lt;/p&gt;
&lt;h2&gt;Let&apos;s make the Kafka cluster validating the data?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gantoin/gantoin.github.io/master/assets/img/blog_content/avro2.png&quot; alt=&quot;Kafka validator&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In theory, it is possible to validate the data in the Kafka cluster. But, the most important, it is not very efficient. You will break what Kafka is doing best: &lt;strong&gt;distributing data fast&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;That&apos;s definitely not what we want.&lt;/p&gt;
&lt;h2&gt;Solution: Apache Avro &amp;amp; Confluent Schema Registry&lt;/h2&gt;
&lt;p&gt;The solution is to use Apache Avro and Confluent Schema Registry.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gantoin/gantoin.github.io/master/assets/img/blog_content/avro3.png&quot; alt=&quot;Kafka validator&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;How to implement it?&lt;/h2&gt;
&lt;h3&gt;1. Define your data model&lt;/h3&gt;
&lt;p&gt;First, you need to define your data model. It is very important to understand that Avro is a schema-based serialization format.&lt;/p&gt;
&lt;p&gt;You will need to add Apache Avro dependency in your project.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;
&amp;lt;dependencies&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;avro&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.10.2&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;avro-maven-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.10.2&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To define a new model you will have to create a new Avro schema. It is a JSON file that describe the data model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;namespace&amp;quot;: &amp;quot;fr.gantoin.domain&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;Book&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;record&amp;quot;,
  &amp;quot;fields&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;title&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;doc&amp;quot;: &amp;quot;The title of the book&amp;quot;
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;author&amp;quot;,
      &amp;quot;type&amp;quot;: [
        &amp;quot;null&amp;quot;,
        {
          &amp;quot;namespace&amp;quot;: &amp;quot;fr.gantoin.domain&amp;quot;,
          &amp;quot;name&amp;quot;: &amp;quot;Author&amp;quot;,
          &amp;quot;type&amp;quot;: &amp;quot;record&amp;quot;,
          &amp;quot;fields&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;firstName&amp;quot;,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
              &amp;quot;doc&amp;quot;: &amp;quot;The author&apos;s first name&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;lastName&amp;quot;,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
              &amp;quot;doc&amp;quot;: &amp;quot;The author&apos;s last name&amp;quot;
            }
          ]
        }
      ],
      &amp;quot;default&amp;quot;: null,
      &amp;quot;doc&amp;quot;: &amp;quot;The author of the book&amp;quot;
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;year&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;int&amp;quot;,
      &amp;quot;logicalType&amp;quot;: &amp;quot;timestamp-millis&amp;quot;,
      &amp;quot;doc&amp;quot;: &amp;quot;The year of the book&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can create really complex data model with Avro. You can check the &lt;a href=&quot;https://avro.apache.org/docs/current/spec.html&quot;&gt;Avro documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;You will also have to create a maven profile to generate the Java classes from the Avro schema.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;
&amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;avro-maven-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.10.2&amp;lt;/version&amp;gt;
  &amp;lt;executions&amp;gt;
    &amp;lt;execution&amp;gt;
      &amp;lt;phase&amp;gt;generate-sources&amp;lt;/phase&amp;gt;
      &amp;lt;goals&amp;gt;
        &amp;lt;goal&amp;gt;schema&amp;lt;/goal&amp;gt;
        &amp;lt;goal&amp;gt;protocol&amp;lt;/goal&amp;gt;
        &amp;lt;goal&amp;gt;idl-protocol&amp;lt;/goal&amp;gt;
      &amp;lt;/goals&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;sourceDirectory&amp;gt;${project.basedir}/src/main/resources/avro&amp;lt;/sourceDirectory&amp;gt;
        &amp;lt;stringType&amp;gt;String&amp;lt;/stringType&amp;gt;
        &amp;lt;createSetters&amp;gt;false&amp;lt;/createSetters&amp;gt;
        &amp;lt;enableDecimalLogicalType&amp;gt;true&amp;lt;/enableDecimalLogicalType&amp;gt;
        &amp;lt;fieldVisibility&amp;gt;private&amp;lt;/fieldVisibility&amp;gt;
      &amp;lt;/configuration&amp;gt;
    &amp;lt;/execution&amp;gt;
  &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a simple command, you will be able to generate the Java classes from the Avro schema.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mvn clean package
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2. Register your schema in the Confluent Schema Registry&lt;/h3&gt;
&lt;p&gt;Once you have defined your data model, you will have to register it in the Confluent Schema Registry.&lt;br /&gt;
Confluent Schema Registry is a schema registry for Avro developed by Confluent.&lt;/p&gt;
&lt;p&gt;Is it important to know that with this kind of architecture, your schema registry become a vital part of your infrastructure. If your schema registry is down, your Kafka cluster will not be able to validate the data.&lt;/p&gt;
&lt;p&gt;To try it, you can start with the project fast-data-dev. It is a docker image that contains a Kafka cluster with Confluent Schema Registry:&lt;br /&gt;
&lt;a href=&quot;https://hub.docker.com/r/landoop/fast-data-dev/dockerfile&quot;&gt;https://hub.docker.com/r/landoop/fast-data-dev/dockerfile&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;3. Use the Confluent Schema Registry in your application&lt;/h3&gt;
&lt;p&gt;Now, you can use the Confluent Schema Registry in your application. First, add the Confluent Avro serializer and deserializer dependency in your project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;io.confluent&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;kafka-avro-serializer&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;6.2.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And Confluence Schema Registry dependency.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;io.confluent&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;kafka-schema-registry-client&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;6.2.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will need to add the Confluent Maven repository.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;
&amp;lt;repositories&amp;gt;
  &amp;lt;repository&amp;gt;
    &amp;lt;id&amp;gt;confluent&amp;lt;/id&amp;gt;
    &amp;lt;name&amp;gt;Confluent&amp;lt;/name&amp;gt;
    &amp;lt;url&amp;gt;https://packages.confluent.io/maven/&amp;lt;/url&amp;gt;
  &amp;lt;/repository&amp;gt;
&amp;lt;/repositories&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will also have to configure the Kafka producer and consumer to use the Confluent Avro serializer and deserializer.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
@Configuration
public class KafkaSenderConfiguration {
    @Bean
    public ProducerFactory&amp;lt;String, GenericRecord&amp;gt; producerFactory() {
        return new DefaultKafkaProducerFactory&amp;lt;&amp;gt;(Map.of(
                ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers,
                ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class,
                ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KafkaAvroSerializer.class,
                &amp;quot;schema.registry.url&amp;quot;, schemaRegistryUrl,
                &amp;quot;specific.avro.reader&amp;quot;, true,
                &amp;quot;auto.register.schemas&amp;quot;, true
        ));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, is referred the serializer and the schema registry url.&lt;/p&gt;
&lt;h3&gt;4. Use the Confluent Schema Registry in your consumer&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
@Configuration
public class KafkaReceiverConfiguration {
    @Bean
    public ConsumerFactory&amp;lt;String, GenericRecord&amp;gt; consumerFactory() {
        return new DefaultKafkaConsumerFactory&amp;lt;&amp;gt;(Map.of(
                ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers,
                ConsumerConfig.GROUP_ID_CONFIG, groupId,
                ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class,
                ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, KafkaAvroDeserializer.class,
                &amp;quot;schema.registry.url&amp;quot;, schemaRegistryUrl,
                &amp;quot;specific.avro.reader&amp;quot;, true,
                &amp;quot;auto.register.schemas&amp;quot;, true
        ));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;5. Update your data model&lt;/h3&gt;
&lt;p&gt;If you need to update your data model, you will have to update the Avro schema and register it in the Confluent Schema Registry.&lt;br /&gt;
Once it is done, you can send your new data model with the new version. Your old consumer will still be able to read your data.&lt;br /&gt;
If you want to know more about Confluent Schema Registry, you can check this article:&lt;br /&gt;
&lt;a href=&quot;https://docs.confluent.io/current/schema-registry/docs/index.html&quot;&gt;https://docs.confluent.io/current/schema-registry/docs/index.html&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, you have learned how to use Apache Avro and Confluent Schema Registry to make your Kafka bus more robust.&lt;/p&gt;
&lt;p&gt;For more details on how to do, here is a live coding video that I made on YouTube (in French, sorry about that):&lt;/p&gt;
&lt;p&gt;[soon]&lt;/p&gt;

                </description>
            </item>
            <item>
                <title>🐳 How to run &apos;landoop/fast-data-dev&apos; on Mac M1?</title>
                <link>https://gantoin.github.io//blog/2023/9f370fd846eeeec332932ceb23c5849e.html</link>
                <pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate>
                <guid isPermaLink="false">blog/2023/9f370fd846eeeec332932ceb23c5849e.html</guid>
                <description>
                        &lt;p&gt;Hey guys!&lt;/p&gt;
&lt;p&gt;I was following a lecture about Kafka Schema Registry when I suddenly had to run Landoop and a bunch of tools with Docker on my Mac.&lt;/p&gt;
&lt;p&gt;I met this error after running this &lt;a href=&quot;https://github.com/lensesio/fast-data-dev/blob/fdd/main/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Setting advertised host to 127.0.0.1.
runtime: failed to create new OS thread (have 2 already; errno=22)
fatal error: newosproc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a few minutes of searching, I understood that&apos;s because I ran it on my M1 arm chip. So, I&apos;ll have to find an ARM version of these programs.&lt;/p&gt;
&lt;p&gt;This it! I found this &lt;a href=&quot;https://github.com/lensesio/fast-data-dev/pull/185&quot;&gt;Dockerfile&lt;/a&gt; which can help you to run easily on your fabulous Mac M1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM golang:bullseye as compile-lkd
MAINTAINER Marios Andreopoulos &amp;lt;marios@landoop.com&amp;gt;

RUN apt-get update \
    &amp;amp;&amp;amp; apt-get install -y \
         unzip \
         wget \
	 file \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* \
    &amp;amp;&amp;amp; echo &amp;quot;progress = dot:giga&amp;quot; | tee /etc/wgetrc \
    &amp;amp;&amp;amp; mkdir -p /mnt /opt /data \
    &amp;amp;&amp;amp; go install github.com/andmarios/duphard@latest \
    &amp;amp;&amp;amp; go install gitlab.com/andmarios/checkport@latest \
    &amp;amp;&amp;amp; go install github.com/andmarios/quickcert@latest \
    &amp;amp;&amp;amp; ln -s  /go/bin/duphard /bin/duphard
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, the easiest to do is to go on your &lt;code&gt;Docker for Mac&lt;/code&gt; software and click on &lt;code&gt;Search&lt;/code&gt; &amp;amp; search &lt;code&gt;dougdonohoe/fast-data-dev&lt;/code&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gantoin/gantoin.github.io/master/assets/img/blog_content/screenshot-docker.png&quot; alt=&quot;https://raw.githubusercontent.com/gantoin/gantoin.github.io/master/assets/img/blog_content/screenshot-docker.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After the image is pulled, get on the &lt;code&gt;Images&lt;/code&gt; tab and run it with exposed port &lt;code&gt;-p 3030:3030&lt;/code&gt;, something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --hostname=912d813335a8 --env=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin --env=LANG=en_US.UTF-8 --env=LANGUAGE=en_US.UTF-8 --env=LC_ALL=en_US.UTF-8 --volume=/data --workdir=/ --runtime=runc -d --add-host host.docker.internal:host-gateway -p 3030:3030 --name=web dougdonohoe/fast-data-dev:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it&apos;s done, enjoy Kafka Schema Registry!&lt;/p&gt;
&lt;p&gt;P.S: the tool &lt;code&gt;kafka-avro-console-producer&lt;/code&gt; will be able to use in the container.&lt;/p&gt;

                </description>
            </item>
            <item>
                <title>🤖 How to use ChatGPT API in your Java application?</title>
                <link>https://gantoin.github.io//blog/2023/190684c344bb70e5c5f9f2339c7be6ed.html</link>
                <pubDate>Sun, 8 Jan 2023 00:00:00 +0000</pubDate>
                <guid isPermaLink="false">blog/2023/190684c344bb70e5c5f9f2339c7be6ed.html</guid>
                <description>
                        &lt;p&gt;Hi guys 👋 I&apos;m sure you enjoy using chat GPT to produce, optimise, or translate code from any programming language to Java.&lt;/p&gt;
&lt;p&gt;Today I&apos;ll show you how to use OpenAI ChatGPT API with Java, it&apos;s pretty easy.&lt;/p&gt;
&lt;h2&gt;1. Register for an API key&lt;/h2&gt;
&lt;p&gt;First, you&apos;ll need to register for an API key by going to the &lt;a href=&quot;https://beta.openai.com/signup/&quot;&gt;OpenAI API page&lt;/a&gt;. Follow the instructions to create an account and obtain an API key.&lt;/p&gt;
&lt;h2&gt;2. Enter a credit card into your OpenAI account&lt;/h2&gt;
&lt;p&gt;OpenAI blocks the API calls for &lt;code&gt;exceeded your current quota&lt;/code&gt; when you don&apos;t have any card registered in your account. So, you will need to configure one.&lt;/p&gt;
&lt;h2&gt;3. Implements code like:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import org.json.JSONObject;

public class ChatGPT {
    public static void chatGPT(String text) throws Exception {
        String url = &amp;quot;https://api.openai.com/v1/completions&amp;quot;;
        HttpURLConnection con = (HttpURLConnection) new URL(url).openConnection();

        con.setRequestMethod(&amp;quot;POST&amp;quot;);
        con.setRequestProperty(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;);
        con.setRequestProperty(&amp;quot;Authorization&amp;quot;, &amp;quot;Bearer YOUR-API-KEY&amp;quot;);

        JSONObject data = new JSONObject();
        data.put(&amp;quot;model&amp;quot;, &amp;quot;text-davinci-003&amp;quot;);
        data.put(&amp;quot;prompt&amp;quot;, text);
        data.put(&amp;quot;max_tokens&amp;quot;, 4000);
        data.put(&amp;quot;temperature&amp;quot;, 1.0);

        con.setDoOutput(true);
        con.getOutputStream().write(data.toString().getBytes());

        String output = new BufferedReader(new InputStreamReader(con.getInputStream())).lines()
                .reduce((a, b) -&amp;gt; a + b).get();

        System.out.println(new JSONObject(output).getJSONArray(&amp;quot;choices&amp;quot;).getJSONObject(0).getString(&amp;quot;text&amp;quot;));
    }

    public static void main(String[] args) throws Exception {
        chatGPT(&amp;quot;Hello, how are you?&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;It works!&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;src.main.java.ChatGPT


I&apos;m doing great, thank you for asking. How about you?

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Resources used:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.json&lt;/code&gt; &lt;a href=&quot;https://mvnrepository.com/artifact/org.json/json/20220924&quot;&gt;https://mvnrepository.com/artifact/org.json/json/20220924&lt;/a&gt; (add this dependency to your project)&lt;/li&gt;
&lt;li&gt;this python tutorial I converted to Java &lt;a href=&quot;https://datasans.medium.com/how-to-use-chatgpt-api-directly-in-your-jupyter-notebook-simple-no-gimmicks-be30bdf9f031&quot;&gt;https://datasans.medium.com/how-to-use-chatgpt-api-directly-in-your-jupyter-notebook-simple-no-gimmicks-be30bdf9f031&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

                </description>
            </item>
            <item>
                <title>📌 Configure Twitch API OAuth2 provider on a Spring Security app</title>
                <link>https://gantoin.github.io//blog/2023/b8ac42b8bc2daeddf90278569b07b93b.html</link>
                <pubDate>Wed, 4 Jan 2023 00:00:00 +0000</pubDate>
                <guid isPermaLink="false">blog/2023/b8ac42b8bc2daeddf90278569b07b93b.html</guid>
                <description>
                        &lt;p&gt;Hi guys, I&apos;m working on a SaaS to manage Twitch Clips of broadcasters:&lt;br /&gt;
- Create vertical Clips automatically for TikTok, Youtube Shorts, etc.&lt;br /&gt;
- Create compilation for clips to easily make best-of&lt;/p&gt;
&lt;p&gt;So, I had to plug my Spring Security app into the Twitch OAuth2 provider and it was not easy...&lt;/p&gt;
&lt;h2&gt;How to do that?&lt;/h2&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;Before you begin, you need to have the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A Twitch account and a registered app on the Twitch Developer Dashboard. If you don&apos;t have one, you can create a new app &lt;a href=&quot;https://dev.twitch.tv/docs/authentication/#registration&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Spring Security application. If you don&apos;t have one, you can follow &lt;a href=&quot;https://spring.io/guides/gs/securing-web/&quot;&gt;these instructions&lt;/a&gt; to create a simple Spring Security app.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Step 1: Add the necessary dependencies&lt;/h3&gt;
&lt;p&gt;First, you need to add the following dependencies to your project&apos;s &lt;code&gt;pom.xml&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;spring-security-oauth2-client&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;spring-security-oauth2-jose&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Step 2: Configure the OAuth2 client&lt;/h3&gt;
&lt;p&gt;Next, you need to configure the OAuth2 client by adding the following properties to your &lt;code&gt;application.properties&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spring.security.oauth2.client.provider.twitch.authorization-uri=https://id.twitch.tv/oauth2/authorize
spring.security.oauth2.client.provider.twitch.token-uri=https://id.twitch.tv/oauth2/token
spring.security.oauth2.client.provider.twitch.jwk-set-uri=https://id.twitch.tv/oauth2/keys
spring.security.oauth2.client.provider.twitch.user-info-uri=https://api.twitch.tv/helix/users
spring.security.oauth2.client.registration.twitch.client-id=&amp;lt;your-client-id&amp;gt;
spring.security.oauth2.client.registration.twitch.client-secret=&amp;lt;your-client-secret&amp;gt;
spring.security.oauth2.client.registration.twitch.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace &lt;code&gt;&amp;lt;your-client-id&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;your-client-secret&amp;gt;&lt;/code&gt; with the client ID and client secret of your registered app on the Twitch Developer Dashboard.&lt;/p&gt;
&lt;h3&gt;Step 3: Configure the OAuth2 filter&lt;/h3&gt;
&lt;p&gt;To configure the OAuth2 filter, you need to create a &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; class and override the &lt;code&gt;configure(HttpSecurity http)&lt;/code&gt; method. Add the following code to the method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;http.oauth2Login()
  .authorizationEndpoint()
    .baseUri(&amp;quot;/oauth2/authorization/twitch&amp;quot;)
  .and()
  .redirectionEndpoint()
    .baseUri(&amp;quot;/oauth2/callback/*&amp;quot;)
  .and()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;🎉 Congratulations! 🎉&lt;/p&gt;
&lt;p&gt;You have successfully configured the Twitch API OAuth2 provider on your Spring Security application.&lt;/p&gt;
&lt;p&gt;🌟 Happy coding! 💻&lt;/p&gt;

                </description>
            </item>
            <item>
                <title>💭 How I became a FullStack Java developer with Vaadin?</title>
                <link>https://gantoin.github.io//blog/2023/8f3c78932057d730b351c17b79770e8c.html</link>
                <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
                <guid isPermaLink="false">blog/2023/8f3c78932057d730b351c17b79770e8c.html</guid>
                <description>
                        &lt;h2&gt;What is Vaadin?&lt;/h2&gt;
&lt;p&gt;Vaadin is an open-source framework for building modern web applications. It allows developers to create rich, interactive user interfaces using Java, without the need to learn JavaScript or any other client-side programming language.&lt;/p&gt;
&lt;p&gt;Vaadin was first released in 2002 and has since become a popular choice for building enterprise-level applications. It is used by companies such as Nokia, Goldman Sachs, and the United States Air Force, among others.&lt;/p&gt;
&lt;h2&gt;Why use Vaadin?&lt;/h2&gt;
&lt;p&gt;There are several reasons why Vaadin might be a good choice for your web application development needs.&lt;/p&gt;
&lt;p&gt;First and foremost, Vaadin allows developers to build web applications using a language that they are already familiar with: Java. This means that developers who are proficient in Java can start building web applications without needing to learn a new programming language.&lt;/p&gt;
&lt;p&gt;Vaadin also has a large community of developers who contribute to the framework and offer support. This means that if you run into any issues while using Vaadin, you are likely to find a solution through the community forums or by reaching out to other developers.&lt;/p&gt;
&lt;p&gt;Vaadin also offers a number of built-in features that can help speed up development. These include a visual designer for building user interfaces, a set of pre-designed UI components, and support for data binding and validation.&lt;/p&gt;
&lt;p&gt;Another advantage of Vaadin is that it is highly customizable. You can create custom UI components and themes, and integrate with other Java libraries and frameworks.&lt;/p&gt;
&lt;h2&gt;Getting started with Vaadin&lt;/h2&gt;
&lt;p&gt;To start building web applications with Vaadin, you will need to have the following software installed on your computer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java JDK 8 or newer&lt;/li&gt;
&lt;li&gt;Apache Maven&lt;/li&gt;
&lt;li&gt;An IDE (Integrated Development Environment) such as Eclipse or IntelliJ IDEA&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have these tools installed, you can start building your first Vaadin application.&lt;/p&gt;
&lt;p&gt;First, create a new Maven project in your IDE. In the project&apos;s &lt;code&gt;pom.xml&lt;/code&gt; file, you will need to add the following dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;com.vaadin&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;vaadin-bom&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;14.4.1&amp;lt;/version&amp;gt;
        &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
        &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;com.vaadin&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;vaadin-server&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, create a servlet that maps to your UI class. This can be done by creating a new Java class that extends the com.vaadin.flow.server.VaadinServlet class and adding the following annotation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@WebServlet(urlPatterns = &amp;quot;/*&amp;quot;, name = &amp;quot;MyUIServlet&amp;quot;, asyncSupported = true)
@VaadinServletConfiguration(ui = MyUI.class, productionMode = false)
public class MyUIServlet extends VaadinServlet {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This servlet will map the / URL pattern to your UI class, and configure the servlet to run in development mode (productionMode = false).&lt;/p&gt;
&lt;p&gt;To run your application, you can either use the built-in Jetty server that comes with Vaadin, or you can deploy your application to an external servlet container such as Tomcat.&lt;/p&gt;
&lt;p&gt;To run the application using the built-in Jetty server, you can use the mvn jetty:run command from the command line. This will start the Jetty server and deploy your application. You can then access the application by navigating to &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; in your web browser.&lt;/p&gt;
&lt;p&gt;To deploy the application to an external servlet container, you will need to create a WAR (Web ARchive) file and deploy it to the container. This can be done by running the mvn package command, which will create a WAR file in the target directory of your project. You can then deploy the WAR file to your servlet container by following the instructions for your specific container.&lt;/p&gt;
&lt;h2&gt;Building user interfaces with Vaadin&lt;/h2&gt;
&lt;p&gt;Vaadin provides a number of UI components that you can use to build your application&apos;s user interface. These include buttons, text fields, tables, and many others.&lt;/p&gt;
&lt;p&gt;To add a component to your UI, you simply need to instantiate the component and add it to the UI using the add method. For example, to add a button to your UI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Button button = new Button(&amp;quot;Click me&amp;quot;);
add(button);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also customize the appearance and behavior of UI components by setting their properties. For example, to set the text of a button:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;button.setText(&amp;quot;Click me&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vaadin also provides a visual designer tool that allows you to design your UI using a drag-and-drop interface. This can be a convenient way to quickly build your UI without having to write code.&lt;/p&gt;
&lt;h2&gt;Data binding and validation&lt;/h2&gt;
&lt;p&gt;Vaadin provides support for data binding and validation, which can help you to manage the flow of data between your application and its user interface.&lt;/p&gt;
&lt;p&gt;Data binding allows you to bind UI components to data sources, so that the component&apos;s value is automatically updated when the data source changes, and vice versa. This can be useful for keeping your UI in sync with your application&apos;s data model.&lt;/p&gt;
&lt;p&gt;To bind a component to a data source, you can use the setValue and getValue methods. For example, to bind a text field to a string data source:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;StringProperty dataSource = new StringProperty(&amp;quot;Initial value&amp;quot;);
TextField textField = new TextField();
textField.setValue(dataSource);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vaadin also provides support for validation, which allows you to ensure that the data entered by the user is valid. You can define validation rules for UI components using the setErrorMessage and setInvalid methods. For example, to ensure that a text field contains a valid email address:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;textField.setErrorMessage(&amp;quot;Please enter a valid email address&amp;quot;);
textField.setInvalid(!EmailValidator.isValid(textField.getValue()));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vaadin also provides a number of built-in validators for common data types such as strings, numbers, and dates.&lt;/p&gt;
&lt;h2&gt;Integrating with other Java libraries and frameworks&lt;/h2&gt;
&lt;p&gt;Vaadin is built on top of the Java programming language, which means that you can easily integrate it with other Java libraries and frameworks.&lt;/p&gt;
&lt;p&gt;For example, you can use Vaadin with the Spring framework to manage dependencies and configure your application. You can also use Vaadin with the Hibernate framework to manage database access and ORM (Object-Relational Mapping).&lt;/p&gt;
&lt;p&gt;Vaadin also provides integrations with a number of other popular Java libraries and frameworks, such as Apache Commons, Apache Lucene, and Google Guice.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Vaadin is a powerful and flexible framework for building modern web applications using Java. It offers a large set of built-in features, a visual designer tool, and support for data binding and validation. It is also highly customizable and can be integrated with other Java libraries and frameworks.&lt;/p&gt;
&lt;p&gt;If you are a Java developer looking to build web applications, Vaadin is definitely worth considering as a tool for your development needs.&lt;/p&gt;
&lt;p&gt;➡️ Official documentation here: &lt;a href=&quot;https://vaadin.com/docs/latest&quot;&gt;https://vaadin.com/docs/latest&lt;/a&gt;&lt;/p&gt;

                </description>
            </item>
            <item>
                <title>🎨 How I created a Twitter bot which paints like Van Gogh</title>
                <link>https://gantoin.github.io//blog/2023/legacy_article1.html</link>
                <pubDate>Thu, 3 Nov 2022 00:00:00 +0000</pubDate>
                <guid isPermaLink="false">blog/2023/legacy_article1.html</guid>
                <description>
                        
&lt;h2&gt;List of tools I used:&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://n8n.io/&quot;&gt;n8n&lt;/a&gt;: free and source-available workflow automation tool (I ran my own
		n8n service on local &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;)
	&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://openai.com/dall-e-2/&quot;&gt;DALL·E 2&lt;/a&gt;: AI system that can create realistic images and
		art from a description in natural language
	&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://core.telegram.org/bots&quot;&gt;Telegram bot&lt;/a&gt;: small applications that run entirely
		within the Telegram app
	&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/&quot;&gt;Wikipedia&lt;/a&gt;: you know what this is...&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;w-richtext-figure-type-image w-richtext-align-center&quot; data-rt-type=&quot;image&quot; data-rt-align=&quot;center&quot;&gt;
	&lt;div&gt;&lt;img
			src=&quot;https://uploads-ssl.webflow.com/635f732c77408df7618d836b/636387a94a12d44a906eaacb_Capture%20d%E2%80%99e%CC%81cran%202022-11-03%20a%CC%80%2010.19.29.png&quot;
			loading=&quot;lazy&quot; width=&quot;auto&quot; height=&quot;auto&quot;&gt;&lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;First, I needed to generate a random sentence that dalle API will consume to produce images for me.&lt;/p&gt;
&lt;p&gt;
	As I want, the bot will draw like Vincent Van Gogh, so I started with this sentence structure:
	&quot;Impressionist painting of ... by Vincent van Gogh&quot;&lt;/p&gt;
&lt;p&gt;After a few tries it works well:&lt;/p&gt;
&lt;figure class=&quot;w-richtext-figure-type-image w-richtext-align-center&quot; data-rt-type=&quot;image&quot; data-rt-align=&quot;center&quot;&gt;
	&lt;div&gt;
		&lt;img
				src=&quot;https://uploads-ssl.webflow.com/635f732c77408df7618d836b/63638793e987e8e0a267348c_Capture%20d%E2%80%99e%CC%81cran%202022-11-03%20a%CC%80%2010.18.45.png&quot;
				loading=&quot;lazy&quot; width=&quot;auto&quot; height=&quot;auto&quot;&gt;
	&lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;So I installed and run locally a n8n service with &lt;a
		href=&quot;https://docs.docker.com/desktop/install/mac-install/&quot;&gt;Docker for Mac&lt;/a&gt;, please refer to &lt;a
		href=&quot;https://docs.n8n.io/hosting/installation/docker/&quot;&gt;this documentation&lt;/a&gt; if you want to do the same.
&lt;/p&gt;
&lt;p&gt;Let&apos;s create a new automation workflow on n8n (you can find the JSON here: &lt;a
		href=&quot;https://github.com/gantoin/my-n8n/blob/master/van_gogh.json&quot;&gt;https://github.com/gantoin/my-n8n/blob/master/van_gogh.json&lt;/a&gt;)
&lt;/p&gt;
&lt;ol start=&quot;&quot;&gt;
	&lt;li&gt;Schedule the trigger of automation → 1 per day, 11:00&lt;/li&gt;
	&lt;li&gt;Get the random words to paint → Wikipedia random page &lt;a
			href=&quot;https://en.wikipedia.org/wiki/Special:Random&quot;&gt;https://en.wikipedia.org/wiki/Special:Random&lt;/a&gt;
	&lt;/li&gt;
	&lt;li&gt;Scrap the title of the random page picked&lt;/li&gt;
	&lt;li&gt;Call the DALL-E&amp;nbsp;API to generate the images: I created a project for that, I dockerized it so I&amp;nbsp;can
		run it locally with my n8n service → &lt;a href=&quot;https://github.com/gantoin/dalle2-in-python-as-webservice&quot;&gt;https://github.com/gantoin/dalle2-in-python-as-webservice&lt;/a&gt;
	&lt;/li&gt;
	&lt;li&gt;Send the pictures to this Telegram bot (I contributed to it), when you will link your Twitter account to
		this bot, it will tweet everything you text him → &lt;a
				href=&quot;https://github.com/QuentinWidlocher/telegram-to-twitter-bot&quot;&gt;https://github.com/QuentinWidlocher/telegram-to-twitter-bot&lt;/a&gt;
	&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;It&apos;s done! &lt;a href=&quot;https://twitter.com/bot_van_gogh&quot;&gt;@bot_van_gogh&lt;/a&gt; will post automatically.&lt;/p&gt;

                </description>
            </item>
            <item>
                <title>☕️ Hexagonal architecture on java applications</title>
                <link>https://gantoin.github.io//blog/2023/legacy_article2.html</link>
                <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
                <guid isPermaLink="false">blog/2023/legacy_article2.html</guid>
                <description>
                        
&lt;p&gt;Hi 👋 today we are going to speak about hexagonal architectures.&lt;/p&gt;
&lt;p&gt;Hexagonal architecture, also known
	as the &quot;ports and adapters&quot; architecture, is a software design pattern that focuses on the separation of business
	logic from the technical details of how that logic is implemented. In this architecture, the business logic of the
	application is contained in the &quot;core&quot; of the application, while the technical details, such as the user interface
	and the database access, are contained in &quot;adapters&quot; that surround the core.&lt;/p&gt;
&lt;figure class=&quot;w-richtext-figure-type-image w-richtext-align-center&quot; data-rt-type=&quot;image&quot; data-rt-align=&quot;center&quot;&gt;
	&lt;div&gt;
		&lt;img
				src=&quot;https://uploads-ssl.webflow.com/635f732c77408df7618d836b/63906107726deea938fab71d_1_9LELTYyRhtTU4oCvpZxL2Q.webp&quot;
				loading=&quot;lazy&quot; width=&quot;auto&quot; height=&quot;auto&quot;&gt;&lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;One of the main benefits of using hexagonal architecture in a Java application is that it allows for
	greater flexibility and modularity. Because the business logic is isolated from the technical details, it is easier
	to make changes to the application without affecting the core functionality. This makes it possible to swap out one
	adapter for another without having to modify the core of the application.&lt;/p&gt;
&lt;figure class=&quot;w-richtext-figure-type-video w-richtext-align-center&quot; style=&quot;padding-bottom:33.723653395784545%&quot;
		data-rt-type=&quot;video&quot; data-rt-align=&quot;center&quot; data-rt-max-width=&quot;&quot; data-rt-max-height=&quot;33.723653395784545%&quot;
		data-rt-dimensions=&quot;854:480&quot; data-page-url=&quot;https://www.youtube.com/watch?v=QCOMeiMYb6I&quot;&gt;
	&lt;div&gt;
		&lt;iframe allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.youtube.com/embed/QCOMeiMYb6I&quot;
				title=&quot;Structure your microservice using a hexagonal architecture by Fredrik Lindgren&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;For example, if you want to change the user interface of your application from a command-line
	interface to a graphical user interface, you can simply create a new adapter for the GUI and swap it in without
	having to touch the core of the application. This makes it easier to maintain and evolve your application over
	time.&lt;/p&gt;
&lt;p&gt;Another benefit of hexagonal architecture is that it promotes the use of testing. Because the core
	of the application is isolated from the adapters, it is easier to test the business logic in isolation. This makes
	it possible to write unit tests for the core of the application, which can help to ensure that it is functioning
	correctly and can help to catch bugs early on in the development process.&lt;/p&gt;
&lt;figure class=&quot;w-richtext-figure-type-image w-richtext-align-center&quot; data-rt-type=&quot;image&quot; data-rt-align=&quot;center&quot;&gt;
	&lt;div&gt;
		&lt;img
				src=&quot;https://uploads-ssl.webflow.com/635f732c77408df7618d836b/639061b9423aac1984e44a02_1_f9NnhYBFEibJKRu8EXSfJQ.webp&quot;
				loading=&quot;lazy&quot; width=&quot;auto&quot; height=&quot;auto&quot;&gt;&lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;Overall, hexagonal architecture is a powerful design pattern that can help to improve the flexibility,
	modularity, and testability of Java applications. If you are building a Java application and want to take advantage
	of these benefits, consider using hexagonal architecture to design your application.&lt;/p&gt;
&lt;p&gt;Thanks for reading,
	enjoy hexagonal architectures!&lt;/p&gt;
&lt;p&gt;(This brief was highly inspired by this article: &lt;a
		href=&quot;https://itnext.io/hexagonal-architecture-principles-practical-example-in-java-364bb2e50075&quot;&gt;https://itnext.io/hexagonal-architecture-principles-practical-example-in-java-364bb2e50075&lt;/a&gt;)
&lt;/p&gt;

                </description>
            </item>
            <item>
                <title>🤖 I fully automatized a YouTube channel</title>
                <link>https://gantoin.github.io//blog/2023/legacy_article3.html</link>
                <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
                <guid isPermaLink="false">blog/2023/legacy_article3.html</guid>
                <description>
                        
&lt;h2&gt;How I fully automatized a YouTube channel?&lt;/h2&gt;
&lt;p&gt;You can check the channel here: &lt;a
		href=&quot;https://www.youtube.com/channel/UCAq2Yn8ASBF76LV85TxR9CQ&quot;&gt;https://www.youtube.com/channel/UCAq2Yn8ASBF76LV85TxR9CQ/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;One year ago, I&amp;nbsp;discovered a fabulous GitHub project called &lt;a
		href=&quot;https://github.com/offish/twitchtube&quot;&gt;twitchtube&lt;/a&gt;. This tool creates a compilation of &lt;a href=&quot;&quot;
&gt;Twitch&lt;/a&gt;
	clips automatically.&lt;/p&gt;
&lt;p&gt;You just have to give him as input the &lt;a href=&quot;https://www.twitch.tv/&quot;&gt;Twitch&lt;/a&gt;
	channel or the game you want to compile and the frequency like a week, a month, etc. So I&amp;nbsp;planned to create a
	channel for video compilations of a game called &lt;a href=&quot;https://dayz.com/&quot;&gt;DayZ&lt;/a&gt; and post it monthly.&lt;/p&gt;
&lt;p&gt;The bot coded by &lt;a href=&quot;https://github.com/offish&quot;&gt;offish&lt;/a&gt; was able to create a compilation video
	and post it on YouTube. But I wanted the bot to also create a thumbnail for the video, so I upgraded it. You can find
	the full code of the upgraded project here:&amp;nbsp;&lt;a href=&quot;https://github.com/gantoin/twitchtube-for-dayz&quot;&gt;https://github.com/gantoin/twitchtube-for-dayz&lt;/a&gt;
&lt;/p&gt;
&lt;figure class=&quot;w-richtext-figure-type-image w-richtext-align-center&quot; data-rt-type=&quot;image&quot; data-rt-align=&quot;center&quot;&gt;
	&lt;div&gt;
		&lt;img src=&quot;https://uploads-ssl.webflow.com/635f732c77408df7618d836b/636e189d5753ff0b35d4aab8_Capture%20d%E2%80%99e%CC%81cran%202022-11-11%20a%CC%80%2010.34.30.png&quot;
				loading=&quot;lazy&quot; width=&quot;auto&quot; height=&quot;auto&quot;&gt;
	&lt;/div&gt;
	&lt;figcaption&gt;Screenshot of the automatized YouTube channel&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To create these thumbnails, I used &lt;a href=&quot;https://imagemagick.org/&quot;&gt;imagemagick&lt;/a&gt; and &lt;a
		href=&quot;https://ffmpeg.org/&quot;&gt;ffmpeg&lt;/a&gt;. Fantastic tools to manipulate images and videos with simple
	commands.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&quot;https://imagemagick.org/&quot;&gt;imagemagick&lt;/a&gt;, I&amp;nbsp;picked 4 images from
	clips, pasted my logo in the middle, and it&apos;s done!&lt;/p&gt;
&lt;figure class=&quot;w-richtext-figure-type-image w-richtext-align-center&quot; data-rt-type=&quot;image&quot; data-rt-align=&quot;center&quot;&gt;
	&lt;div&gt;
		&lt;img src=&quot;https://uploads-ssl.webflow.com/635f732c77408df7618d836b/636e1a86124c7a88b2a603d7_Capture%20d%E2%80%99e%CC%81cran%202022-11-11%20a%CC%80%2010.48.41.png&quot;
				loading=&quot;lazy&quot; width=&quot;auto&quot; height=&quot;auto&quot;&gt;
	&lt;/div&gt;
	&lt;figcaption&gt;Code to generate thumbnails&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I also customized the bot to put the name of the video dynamically.&lt;/p&gt;
&lt;p&gt;I&amp;nbsp;just had to
	create a scheduled command which runs the startup command: &lt;em&gt;python3 run main.py&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And that&apos;s
	all, my YouTube channel was fully automatized. Nowadays, it&apos;s not. You know... Maintaining side projects asks a lot
	of energy. So Twitch updated their APIs and the bot didn&apos;t work well.&lt;/p&gt;
&lt;p&gt;I should fix it... Some day...&lt;/p&gt;

                </description>
            </item>
            <item>
                <title>☂️ How to plug your Umbrel&apos;s Nextcloud into the official Nextcloud mobile app? (...</title>
                <link>https://gantoin.github.io//blog/2023/d619467f6d9574cddf0072fb9f9f70f6.html</link>
                <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
                <guid isPermaLink="false">blog/2023/d619467f6d9574cddf0072fb9f9f70f6.html</guid>
                <description>
                        &lt;h2&gt;Why you could want to do that?&lt;/h2&gt;
&lt;p&gt;You could want to use the Nextcloud app to make saving your phone data easier or to get documents from your cloud easily (without a Tor browser, connect via onion etc.).&lt;/p&gt;
&lt;h2&gt;Why is it not possible natively?&lt;/h2&gt;
&lt;p&gt;It&apos;s impossible to connect the Nextcloud app to a onion address, you need a clear-net URL. We will use Tailscale to solve this problem.&lt;/p&gt;
&lt;h2&gt;What is Tailscale?&lt;/h2&gt;
&lt;p&gt;Tailscale is a zero-config VPN. The easiest way to create a secure network between your servers, computers, and cloud instances. We will use Tailscale to connect Umbrel&apos;s Nextcloud to your mobile with clear-net (or any other device).&lt;br /&gt;
&lt;a href=&quot;https://github.com/tailscale/tailscale&quot;&gt;https://github.com/tailscale/tailscale&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install Tailscale on your devices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Umbrel: Go to your umbrel (directly &lt;a href=&quot;http://umbrel.local&quot;&gt;http://umbrel.local&lt;/a&gt;, not using onion because Tailescale doesn’t work - for me - using tor connection). Install the app via the App Store.&lt;/li&gt;
&lt;li&gt;Phone: Install the Tailscale app via the Google/Apple Store.&lt;/li&gt;
&lt;li&gt;Computer: &lt;a href=&quot;https://tailscale.com/&quot;&gt;https://tailscale.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Create a Tailscale account, and connect all your devices on this account.&lt;/p&gt;
&lt;h2&gt;Configure new trusted domain on your Nextcloud app&lt;/h2&gt;
&lt;p&gt;Connect via ssh on your umbrel :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh umbrel@umbrel.local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find the ID of the Nexcloud container :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pick the ID of the service started with &lt;code&gt;/entrypoint.sh apac…&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Enter this command, to add your nextcloud Tailscale address as truster_domain :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker exec --user www-data ID_OF_THE_NEXTCLOUD_CONTAINER php occ config:system:set trusted_domains 3 --value=IP_OF_YOUR_UMBREL_ON_TAILSCALE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Enjoy!&lt;/h3&gt;
&lt;p&gt;Now, you can enter the Tailscale IP of your umbrel with the port on the Nextcloud App.&lt;/p&gt;
&lt;p&gt;⚠️ Don&apos;t use SSL → HTTP instead HTTPS&lt;/p&gt;

                </description>
            </item>

    </channel>
</rss>
